// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericBoson.Zozo
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoginAck : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LoginAck GetRootAsLoginAck(ByteBuffer _bb) { return GetRootAsLoginAck(_bb, new LoginAck()); }
  public static LoginAck GetRootAsLoginAck(ByteBuffer _bb, LoginAck obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoginAck __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericBoson.Zozo.ResultCode ResultCode { get { int o = __p.__offset(4); return o != 0 ? (GenericBoson.Zozo.ResultCode)__p.bb.GetUint(o + __p.bb_pos) : GenericBoson.Zozo.ResultCode.Success; } }
  public GenericBoson.Zozo.ServerInfo? ServerInfo(int j) { int o = __p.__offset(6); return o != 0 ? (GenericBoson.Zozo.ServerInfo?)(new GenericBoson.Zozo.ServerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ServerInfoLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Token { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTokenBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTokenArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GenericBoson.Zozo.LoginAck> CreateLoginAck(FlatBufferBuilder builder,
      GenericBoson.Zozo.ResultCode result_code = GenericBoson.Zozo.ResultCode.Success,
      VectorOffset server_infoOffset = default(VectorOffset),
      StringOffset tokenOffset = default(StringOffset)) {
    builder.StartTable(3);
    LoginAck.AddToken(builder, tokenOffset);
    LoginAck.AddServerInfo(builder, server_infoOffset);
    LoginAck.AddResultCode(builder, result_code);
    return LoginAck.EndLoginAck(builder);
  }

  public static void StartLoginAck(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddResultCode(FlatBufferBuilder builder, GenericBoson.Zozo.ResultCode resultCode) { builder.AddUint(0, (uint)resultCode, 0); }
  public static void AddServerInfo(FlatBufferBuilder builder, VectorOffset serverInfoOffset) { builder.AddOffset(1, serverInfoOffset.Value, 0); }
  public static VectorOffset CreateServerInfoVector(FlatBufferBuilder builder, Offset<GenericBoson.Zozo.ServerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateServerInfoVectorBlock(FlatBufferBuilder builder, Offset<GenericBoson.Zozo.ServerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServerInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<GenericBoson.Zozo.ServerInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServerInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<GenericBoson.Zozo.ServerInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartServerInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddToken(FlatBufferBuilder builder, StringOffset tokenOffset) { builder.AddOffset(2, tokenOffset.Value, 0); }
  public static Offset<GenericBoson.Zozo.LoginAck> EndLoginAck(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericBoson.Zozo.LoginAck>(o);
  }
}


static public class LoginAckVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ResultCode*/, 4 /*GenericBoson.Zozo.ResultCode*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*ServerInfo*/, GenericBoson.Zozo.ServerInfoVerify.Verify, false)
      && verifier.VerifyString(tablePos, 8 /*Token*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
