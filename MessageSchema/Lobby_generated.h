// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOBBY_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_LOBBY_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct LoginReq;
struct LoginReqBuilder;

struct LoginAck;
struct LoginAckBuilder;

struct LoginReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *account() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginReqBuilder {
  typedef LoginReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account(::flatbuffers::Offset<::flatbuffers::String> account) {
    fbb_.AddOffset(LoginReq::VT_ACCOUNT, account);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(LoginReq::VT_PASSWORD, password);
  }
  explicit LoginReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginReq> CreateLoginReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  LoginReqBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_account(account);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginReq> CreateLoginReqDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr,
    const char *password = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return GenericBoson::Zozo::CreateLoginReq(
      _fbb,
      account__,
      password__);
}

struct LoginAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  GenericBoson::Zozo::ResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::ResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct LoginAckBuilder {
  typedef LoginAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::ResultCode result_code) {
    fbb_.AddElement<uint32_t>(LoginAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  explicit LoginAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginAck> CreateLoginAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success) {
  LoginAckBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

inline const GenericBoson::Zozo::LoginAck *GetLoginAck(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::LoginAck>(buf);
}

inline const GenericBoson::Zozo::LoginAck *GetSizePrefixedLoginAck(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::LoginAck>(buf);
}

inline bool VerifyLoginAckBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::LoginAck>(nullptr);
}

inline bool VerifySizePrefixedLoginAckBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::LoginAck>(nullptr);
}

inline void FinishLoginAckBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LoginAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginAckBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LoginAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_LOBBY_GENERICBOSON_ZOZO_H_
