// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEMINFO_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_ITEMINFO_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct ItemInfo;
struct ItemInfoBuilder;

enum ItemType : int32_t {
  ItemType_None = 0,
  ItemType_Currency = 1,
  ItemType_Consumable = 2,
  ItemType_Weapon = 3,
  ItemType_Armor = 4,
  ItemType_Accessory = 5,
  ItemType_MIN = ItemType_None,
  ItemType_MAX = ItemType_Accessory
};

inline const ItemType (&EnumValuesItemType())[6] {
  static const ItemType values[] = {
    ItemType_None,
    ItemType_Currency,
    ItemType_Consumable,
    ItemType_Weapon,
    ItemType_Armor,
    ItemType_Accessory
  };
  return values;
}

inline const char * const *EnumNamesItemType() {
  static const char * const names[7] = {
    "None",
    "Currency",
    "Consumable",
    "Weapon",
    "Armor",
    "Accessory",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemType(ItemType e) {
  if (::flatbuffers::IsOutRange(e, ItemType_None, ItemType_Accessory)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemType()[index];
}

enum ItemAttribute : int32_t {
  ItemAttribute_NonStackable = 1,
  ItemAttribute_Expairation = 2,
  ItemAttribute_MIN = ItemAttribute_NonStackable,
  ItemAttribute_MAX = ItemAttribute_Expairation
};

inline const ItemAttribute (&EnumValuesItemAttribute())[2] {
  static const ItemAttribute values[] = {
    ItemAttribute_NonStackable,
    ItemAttribute_Expairation
  };
  return values;
}

inline const char * const *EnumNamesItemAttribute() {
  static const char * const names[3] = {
    "NonStackable",
    "Expairation",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemAttribute(ItemAttribute e) {
  if (::flatbuffers::IsOutRange(e, ItemAttribute_NonStackable, ItemAttribute_Expairation)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ItemAttribute_NonStackable);
  return EnumNamesItemAttribute()[index];
}

struct ItemInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_EFFECT_ID = 8,
    VT_ATTRIBUTE = 10,
    VT_TYPE = 12
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int64_t effect_id() const {
    return GetField<int64_t>(VT_EFFECT_ID, 0);
  }
  const ::flatbuffers::Vector<int32_t> *attribute() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_ATTRIBUTE);
  }
  GenericBoson::Zozo::ItemType type() const {
    return static_cast<GenericBoson::Zozo::ItemType>(GetField<int32_t>(VT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int64_t>(verifier, VT_EFFECT_ID, 8) &&
           VerifyOffset(verifier, VT_ATTRIBUTE) &&
           verifier.VerifyVector(attribute()) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct ItemInfoBuilder {
  typedef ItemInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(ItemInfo::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ItemInfo::VT_NAME, name);
  }
  void add_effect_id(int64_t effect_id) {
    fbb_.AddElement<int64_t>(ItemInfo::VT_EFFECT_ID, effect_id, 0);
  }
  void add_attribute(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> attribute) {
    fbb_.AddOffset(ItemInfo::VT_ATTRIBUTE, attribute);
  }
  void add_type(GenericBoson::Zozo::ItemType type) {
    fbb_.AddElement<int32_t>(ItemInfo::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  explicit ItemInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemInfo> CreateItemInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int64_t effect_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> attribute = 0,
    GenericBoson::Zozo::ItemType type = GenericBoson::Zozo::ItemType_None) {
  ItemInfoBuilder builder_(_fbb);
  builder_.add_effect_id(effect_id);
  builder_.add_id(id);
  builder_.add_type(type);
  builder_.add_attribute(attribute);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemInfo> CreateItemInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 0,
    const char *name = nullptr,
    int64_t effect_id = 0,
    const std::vector<int32_t> *attribute = nullptr,
    GenericBoson::Zozo::ItemType type = GenericBoson::Zozo::ItemType_None) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto attribute__ = attribute ? _fbb.CreateVector<int32_t>(*attribute) : 0;
  return GenericBoson::Zozo::CreateItemInfo(
      _fbb,
      id,
      name__,
      effect_id,
      attribute__,
      type);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_ITEMINFO_GENERICBOSON_ZOZO_H_
