// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERINFO_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_SERVERINFO_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct ServerInfo;
struct ServerInfoBuilder;

struct ServerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_IP = 6,
    VT_PORT = 8,
    VT_CURRENT_CCU = 10,
    VT_MAX_CCU = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  const ::flatbuffers::String *port() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PORT);
  }
  int32_t current_ccu() const {
    return GetField<int32_t>(VT_CURRENT_CCU, 0);
  }
  int32_t max_ccu() const {
    return GetField<int32_t>(VT_MAX_CCU, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyString(port()) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_CCU, 4) &&
           VerifyField<int32_t>(verifier, VT_MAX_CCU, 4) &&
           verifier.EndTable();
  }
};

struct ServerInfoBuilder {
  typedef ServerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ServerInfo::VT_NAME, name);
  }
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(ServerInfo::VT_IP, ip);
  }
  void add_port(::flatbuffers::Offset<::flatbuffers::String> port) {
    fbb_.AddOffset(ServerInfo::VT_PORT, port);
  }
  void add_current_ccu(int32_t current_ccu) {
    fbb_.AddElement<int32_t>(ServerInfo::VT_CURRENT_CCU, current_ccu, 0);
  }
  void add_max_ccu(int32_t max_ccu) {
    fbb_.AddElement<int32_t>(ServerInfo::VT_MAX_CCU, max_ccu, 0);
  }
  explicit ServerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    ::flatbuffers::Offset<::flatbuffers::String> port = 0,
    int32_t current_ccu = 0,
    int32_t max_ccu = 0) {
  ServerInfoBuilder builder_(_fbb);
  builder_.add_max_ccu(max_ccu);
  builder_.add_current_ccu(current_ccu);
  builder_.add_port(port);
  builder_.add_ip(ip);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *ip = nullptr,
    const char *port = nullptr,
    int32_t current_ccu = 0,
    int32_t max_ccu = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  auto port__ = port ? _fbb.CreateString(port) : 0;
  return GenericBoson::Zozo::CreateServerInfo(
      _fbb,
      name__,
      ip__,
      port__,
      current_ccu,
      max_ccu);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_SERVERINFO_GENERICBOSON_ZOZO_H_
