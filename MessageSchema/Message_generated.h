// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_MESSAGE_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "CharacterMove_generated.h"
#include "Connection_generated.h"
#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct Message;
struct MessageBuilder;

enum Payload : uint8_t {
  Payload_NONE = 0,
  Payload_ConnectionReq = 1,
  Payload_ConnectionAck = 2,
  Payload_Ping = 3,
  Payload_Pong = 4,
  Payload_CharacterMoveReq = 5,
  Payload_CharacterMoveAck = 6,
  Payload_MIN = Payload_NONE,
  Payload_MAX = Payload_CharacterMoveAck
};

inline const Payload (&EnumValuesPayload())[7] {
  static const Payload values[] = {
    Payload_NONE,
    Payload_ConnectionReq,
    Payload_ConnectionAck,
    Payload_Ping,
    Payload_Pong,
    Payload_CharacterMoveReq,
    Payload_CharacterMoveAck
  };
  return values;
}

inline const char * const *EnumNamesPayload() {
  static const char * const names[8] = {
    "NONE",
    "ConnectionReq",
    "ConnectionAck",
    "Ping",
    "Pong",
    "CharacterMoveReq",
    "CharacterMoveAck",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  if (::flatbuffers::IsOutRange(e, Payload_NONE, Payload_CharacterMoveAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = Payload_NONE;
};

template<> struct PayloadTraits<GenericBoson::Zozo::ConnectionReq> {
  static const Payload enum_value = Payload_ConnectionReq;
};

template<> struct PayloadTraits<GenericBoson::Zozo::ConnectionAck> {
  static const Payload enum_value = Payload_ConnectionAck;
};

template<> struct PayloadTraits<GenericBoson::Zozo::Ping> {
  static const Payload enum_value = Payload_Ping;
};

template<> struct PayloadTraits<GenericBoson::Zozo::Pong> {
  static const Payload enum_value = Payload_Pong;
};

template<> struct PayloadTraits<GenericBoson::Zozo::CharacterMoveReq> {
  static const Payload enum_value = Payload_CharacterMoveReq;
};

template<> struct PayloadTraits<GenericBoson::Zozo::CharacterMoveAck> {
  static const Payload enum_value = Payload_CharacterMoveAck;
};

bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::Payload payload_type() const {
    return static_cast<GenericBoson::Zozo::Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::ConnectionReq *payload_as_ConnectionReq() const {
    return payload_type() == GenericBoson::Zozo::Payload_ConnectionReq ? static_cast<const GenericBoson::Zozo::ConnectionReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::ConnectionAck *payload_as_ConnectionAck() const {
    return payload_type() == GenericBoson::Zozo::Payload_ConnectionAck ? static_cast<const GenericBoson::Zozo::ConnectionAck *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::Ping *payload_as_Ping() const {
    return payload_type() == GenericBoson::Zozo::Payload_Ping ? static_cast<const GenericBoson::Zozo::Ping *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::Pong *payload_as_Pong() const {
    return payload_type() == GenericBoson::Zozo::Payload_Pong ? static_cast<const GenericBoson::Zozo::Pong *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterMoveReq *payload_as_CharacterMoveReq() const {
    return payload_type() == GenericBoson::Zozo::Payload_CharacterMoveReq ? static_cast<const GenericBoson::Zozo::CharacterMoveReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterMoveAck *payload_as_CharacterMoveAck() const {
    return payload_type() == GenericBoson::Zozo::Payload_CharacterMoveAck ? static_cast<const GenericBoson::Zozo::CharacterMoveAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::ConnectionReq *Message::payload_as<GenericBoson::Zozo::ConnectionReq>() const {
  return payload_as_ConnectionReq();
}

template<> inline const GenericBoson::Zozo::ConnectionAck *Message::payload_as<GenericBoson::Zozo::ConnectionAck>() const {
  return payload_as_ConnectionAck();
}

template<> inline const GenericBoson::Zozo::Ping *Message::payload_as<GenericBoson::Zozo::Ping>() const {
  return payload_as_Ping();
}

template<> inline const GenericBoson::Zozo::Pong *Message::payload_as<GenericBoson::Zozo::Pong>() const {
  return payload_as_Pong();
}

template<> inline const GenericBoson::Zozo::CharacterMoveReq *Message::payload_as<GenericBoson::Zozo::CharacterMoveReq>() const {
  return payload_as_CharacterMoveReq();
}

template<> inline const GenericBoson::Zozo::CharacterMoveAck *Message::payload_as<GenericBoson::Zozo::CharacterMoveAck>() const {
  return payload_as_CharacterMoveAck();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::Payload payload_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::Payload payload_type = GenericBoson::Zozo::Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case Payload_NONE: {
      return true;
    }
    case Payload_ConnectionReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::ConnectionReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_ConnectionAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::ConnectionAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_Ping: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::Ping *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_Pong: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::Pong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_CharacterMoveReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_CharacterMoveAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::Message>(buf);
}

inline const GenericBoson::Zozo::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_MESSAGE_GENERICBOSON_ZOZO_H_
