// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOBBYSERVER_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_LOBBYSERVER_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "CharacterInfo_generated.h"
#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct LoginReq;
struct LoginReqBuilder;

struct ServerInfo;
struct ServerInfoBuilder;

struct LoginAck;
struct LoginAckBuilder;

struct LobbyMessage;
struct LobbyMessageBuilder;

enum LobbyPayload : uint8_t {
  LobbyPayload_NONE = 0,
  LobbyPayload_LoginReq = 1,
  LobbyPayload_LoginAck = 2,
  LobbyPayload_MIN = LobbyPayload_NONE,
  LobbyPayload_MAX = LobbyPayload_LoginAck
};

inline const LobbyPayload (&EnumValuesLobbyPayload())[3] {
  static const LobbyPayload values[] = {
    LobbyPayload_NONE,
    LobbyPayload_LoginReq,
    LobbyPayload_LoginAck
  };
  return values;
}

inline const char * const *EnumNamesLobbyPayload() {
  static const char * const names[4] = {
    "NONE",
    "LoginReq",
    "LoginAck",
    nullptr
  };
  return names;
}

inline const char *EnumNameLobbyPayload(LobbyPayload e) {
  if (::flatbuffers::IsOutRange(e, LobbyPayload_NONE, LobbyPayload_LoginAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLobbyPayload()[index];
}

template<typename T> struct LobbyPayloadTraits {
  static const LobbyPayload enum_value = LobbyPayload_NONE;
};

template<> struct LobbyPayloadTraits<GenericBoson::Zozo::LoginReq> {
  static const LobbyPayload enum_value = LobbyPayload_LoginReq;
};

template<> struct LobbyPayloadTraits<GenericBoson::Zozo::LoginAck> {
  static const LobbyPayload enum_value = LobbyPayload_LoginAck;
};

bool VerifyLobbyPayload(::flatbuffers::Verifier &verifier, const void *obj, LobbyPayload type);
bool VerifyLobbyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct LoginReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *account() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginReqBuilder {
  typedef LoginReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account(::flatbuffers::Offset<::flatbuffers::String> account) {
    fbb_.AddOffset(LoginReq::VT_ACCOUNT, account);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(LoginReq::VT_PASSWORD, password);
  }
  explicit LoginReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginReq> CreateLoginReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  LoginReqBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_account(account);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginReq> CreateLoginReqDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr,
    const char *password = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return GenericBoson::Zozo::CreateLoginReq(
      _fbb,
      account__,
      password__);
}

struct ServerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_IP = 6,
    VT_PORT = 8,
    VT_CURRENT_CCU = 10,
    VT_MAX_CCU = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *ip() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IP);
  }
  const ::flatbuffers::String *port() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PORT);
  }
  int32_t current_ccu() const {
    return GetField<int32_t>(VT_CURRENT_CCU, 0);
  }
  int32_t max_ccu() const {
    return GetField<int32_t>(VT_MAX_CCU, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyString(port()) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_CCU, 4) &&
           VerifyField<int32_t>(verifier, VT_MAX_CCU, 4) &&
           verifier.EndTable();
  }
};

struct ServerInfoBuilder {
  typedef ServerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ServerInfo::VT_NAME, name);
  }
  void add_ip(::flatbuffers::Offset<::flatbuffers::String> ip) {
    fbb_.AddOffset(ServerInfo::VT_IP, ip);
  }
  void add_port(::flatbuffers::Offset<::flatbuffers::String> port) {
    fbb_.AddOffset(ServerInfo::VT_PORT, port);
  }
  void add_current_ccu(int32_t current_ccu) {
    fbb_.AddElement<int32_t>(ServerInfo::VT_CURRENT_CCU, current_ccu, 0);
  }
  void add_max_ccu(int32_t max_ccu) {
    fbb_.AddElement<int32_t>(ServerInfo::VT_MAX_CCU, max_ccu, 0);
  }
  explicit ServerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ip = 0,
    ::flatbuffers::Offset<::flatbuffers::String> port = 0,
    int32_t current_ccu = 0,
    int32_t max_ccu = 0) {
  ServerInfoBuilder builder_(_fbb);
  builder_.add_max_ccu(max_ccu);
  builder_.add_current_ccu(current_ccu);
  builder_.add_port(port);
  builder_.add_ip(ip);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerInfo> CreateServerInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *ip = nullptr,
    const char *port = nullptr,
    int32_t current_ccu = 0,
    int32_t max_ccu = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  auto port__ = port ? _fbb.CreateString(port) : 0;
  return GenericBoson::Zozo::CreateServerInfo(
      _fbb,
      name__,
      ip__,
      port__,
      current_ccu,
      max_ccu);
}

struct LoginAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4,
    VT_SERVER_INFO = 6,
    VT_TOKEN = 8
  };
  GenericBoson::Zozo::ResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::ResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>> *server_info() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>> *>(VT_SERVER_INFO);
  }
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           VerifyOffset(verifier, VT_SERVER_INFO) &&
           verifier.VerifyVector(server_info()) &&
           verifier.VerifyVectorOfTables(server_info()) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
};

struct LoginAckBuilder {
  typedef LoginAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::ResultCode result_code) {
    fbb_.AddElement<uint32_t>(LoginAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  void add_server_info(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>>> server_info) {
    fbb_.AddOffset(LoginAck::VT_SERVER_INFO, server_info);
  }
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(LoginAck::VT_TOKEN, token);
  }
  explicit LoginAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginAck> CreateLoginAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>>> server_info = 0,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0) {
  LoginAckBuilder builder_(_fbb);
  builder_.add_token(token);
  builder_.add_server_info(server_info);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginAck> CreateLoginAckDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success,
    const std::vector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>> *server_info = nullptr,
    const char *token = nullptr) {
  auto server_info__ = server_info ? _fbb.CreateVector<::flatbuffers::Offset<GenericBoson::Zozo::ServerInfo>>(*server_info) : 0;
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return GenericBoson::Zozo::CreateLoginAck(
      _fbb,
      result_code,
      server_info__,
      token__);
}

struct LobbyMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LobbyMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::LobbyPayload payload_type() const {
    return static_cast<GenericBoson::Zozo::LobbyPayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::LoginReq *payload_as_LoginReq() const {
    return payload_type() == GenericBoson::Zozo::LobbyPayload_LoginReq ? static_cast<const GenericBoson::Zozo::LoginReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::LoginAck *payload_as_LoginAck() const {
    return payload_type() == GenericBoson::Zozo::LobbyPayload_LoginAck ? static_cast<const GenericBoson::Zozo::LoginAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyLobbyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::LoginReq *LobbyMessage::payload_as<GenericBoson::Zozo::LoginReq>() const {
  return payload_as_LoginReq();
}

template<> inline const GenericBoson::Zozo::LoginAck *LobbyMessage::payload_as<GenericBoson::Zozo::LoginAck>() const {
  return payload_as_LoginAck();
}

struct LobbyMessageBuilder {
  typedef LobbyMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::LobbyPayload payload_type) {
    fbb_.AddElement<uint8_t>(LobbyMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(LobbyMessage::VT_PAYLOAD, payload);
  }
  explicit LobbyMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LobbyMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LobbyMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LobbyMessage> CreateLobbyMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::LobbyPayload payload_type = GenericBoson::Zozo::LobbyPayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  LobbyMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyLobbyPayload(::flatbuffers::Verifier &verifier, const void *obj, LobbyPayload type) {
  switch (type) {
    case LobbyPayload_NONE: {
      return true;
    }
    case LobbyPayload_LoginReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::LoginReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LobbyPayload_LoginAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::LoginAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyLobbyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLobbyPayload(
        verifier,  values->Get(i), types->GetEnum<LobbyPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::LobbyMessage *GetLobbyMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::LobbyMessage>(buf);
}

inline const GenericBoson::Zozo::LobbyMessage *GetSizePrefixedLobbyMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::LobbyMessage>(buf);
}

inline bool VerifyLobbyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::LobbyMessage>(nullptr);
}

inline bool VerifySizePrefixedLobbyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::LobbyMessage>(nullptr);
}

inline void FinishLobbyMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LobbyMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLobbyMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LobbyMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_LOBBYSERVER_GENERICBOSON_ZOZO_H_
