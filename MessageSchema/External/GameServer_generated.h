// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"
#include "CharacterMove_generated.h"

namespace GenericBoson {
namespace Zozo {

struct CharacterListReq;
struct CharacterListReqBuilder;

struct CharacterListAck;
struct CharacterListAckBuilder;

struct GameMessage;
struct GameMessageBuilder;

enum GamePayload : uint8_t {
  GamePayload_NONE = 0,
  GamePayload_CharacterListReq = 1,
  GamePayload_CharacterListAck = 2,
  GamePayload_CharacterMoveReq = 3,
  GamePayload_CharacterMoveAck = 4,
  GamePayload_MIN = GamePayload_NONE,
  GamePayload_MAX = GamePayload_CharacterMoveAck
};

inline const GamePayload (&EnumValuesGamePayload())[5] {
  static const GamePayload values[] = {
    GamePayload_NONE,
    GamePayload_CharacterListReq,
    GamePayload_CharacterListAck,
    GamePayload_CharacterMoveReq,
    GamePayload_CharacterMoveAck
  };
  return values;
}

inline const char * const *EnumNamesGamePayload() {
  static const char * const names[6] = {
    "NONE",
    "CharacterListReq",
    "CharacterListAck",
    "CharacterMoveReq",
    "CharacterMoveAck",
    nullptr
  };
  return names;
}

inline const char *EnumNameGamePayload(GamePayload e) {
  if (::flatbuffers::IsOutRange(e, GamePayload_NONE, GamePayload_CharacterMoveAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGamePayload()[index];
}

template<typename T> struct GamePayloadTraits {
  static const GamePayload enum_value = GamePayload_NONE;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterListReq> {
  static const GamePayload enum_value = GamePayload_CharacterListReq;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterListAck> {
  static const GamePayload enum_value = GamePayload_CharacterListAck;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterMoveReq> {
  static const GamePayload enum_value = GamePayload_CharacterMoveReq;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterMoveAck> {
  static const GamePayload enum_value = GamePayload_CharacterMoveAck;
};

bool VerifyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, GamePayload type);
bool VerifyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct CharacterListReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CharacterListReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_TOKEN = 6
  };
  const ::flatbuffers::String *account() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT);
  }
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
};

struct CharacterListReqBuilder {
  typedef CharacterListReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account(::flatbuffers::Offset<::flatbuffers::String> account) {
    fbb_.AddOffset(CharacterListReq::VT_ACCOUNT, account);
  }
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(CharacterListReq::VT_TOKEN, token);
  }
  explicit CharacterListReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CharacterListReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CharacterListReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CharacterListReq> CreateCharacterListReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account = 0,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0) {
  CharacterListReqBuilder builder_(_fbb);
  builder_.add_token(token);
  builder_.add_account(account);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CharacterListReq> CreateCharacterListReqDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr,
    const char *token = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return GenericBoson::Zozo::CreateCharacterListReq(
      _fbb,
      account__,
      token__);
}

struct CharacterListAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CharacterListAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4,
    VT_CHARACTER_NAMES = 6
  };
  GenericBoson::Zozo::ResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::ResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *character_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CHARACTER_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           VerifyOffset(verifier, VT_CHARACTER_NAMES) &&
           verifier.VerifyVector(character_names()) &&
           verifier.VerifyVectorOfStrings(character_names()) &&
           verifier.EndTable();
  }
};

struct CharacterListAckBuilder {
  typedef CharacterListAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::ResultCode result_code) {
    fbb_.AddElement<uint32_t>(CharacterListAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  void add_character_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> character_names) {
    fbb_.AddOffset(CharacterListAck::VT_CHARACTER_NAMES, character_names);
  }
  explicit CharacterListAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CharacterListAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CharacterListAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CharacterListAck> CreateCharacterListAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> character_names = 0) {
  CharacterListAckBuilder builder_(_fbb);
  builder_.add_character_names(character_names);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CharacterListAck> CreateCharacterListAckDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *character_names = nullptr) {
  auto character_names__ = character_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*character_names) : 0;
  return GenericBoson::Zozo::CreateCharacterListAck(
      _fbb,
      result_code,
      character_names__);
}

struct GameMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::GamePayload payload_type() const {
    return static_cast<GenericBoson::Zozo::GamePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::CharacterListReq *payload_as_CharacterListReq() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterListReq ? static_cast<const GenericBoson::Zozo::CharacterListReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterListAck *payload_as_CharacterListAck() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterListAck ? static_cast<const GenericBoson::Zozo::CharacterListAck *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterMoveReq *payload_as_CharacterMoveReq() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterMoveReq ? static_cast<const GenericBoson::Zozo::CharacterMoveReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterMoveAck *payload_as_CharacterMoveAck() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterMoveAck ? static_cast<const GenericBoson::Zozo::CharacterMoveAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyGamePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::CharacterListReq *GameMessage::payload_as<GenericBoson::Zozo::CharacterListReq>() const {
  return payload_as_CharacterListReq();
}

template<> inline const GenericBoson::Zozo::CharacterListAck *GameMessage::payload_as<GenericBoson::Zozo::CharacterListAck>() const {
  return payload_as_CharacterListAck();
}

template<> inline const GenericBoson::Zozo::CharacterMoveReq *GameMessage::payload_as<GenericBoson::Zozo::CharacterMoveReq>() const {
  return payload_as_CharacterMoveReq();
}

template<> inline const GenericBoson::Zozo::CharacterMoveAck *GameMessage::payload_as<GenericBoson::Zozo::CharacterMoveAck>() const {
  return payload_as_CharacterMoveAck();
}

struct GameMessageBuilder {
  typedef GameMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::GamePayload payload_type) {
    fbb_.AddElement<uint8_t>(GameMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(GameMessage::VT_PAYLOAD, payload);
  }
  explicit GameMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameMessage> CreateGameMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::GamePayload payload_type = GenericBoson::Zozo::GamePayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  GameMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, GamePayload type) {
  switch (type) {
    case GamePayload_NONE: {
      return true;
    }
    case GamePayload_CharacterListReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterListReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GamePayload_CharacterListAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterListAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GamePayload_CharacterMoveReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GamePayload_CharacterMoveAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGamePayload(
        verifier,  values->Get(i), types->GetEnum<GamePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::GameMessage *GetGameMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::GameMessage>(buf);
}

inline const GenericBoson::Zozo::GameMessage *GetSizePrefixedGameMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::GameMessage>(buf);
}

inline bool VerifyGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::GameMessage>(nullptr);
}

inline bool VerifySizePrefixedGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::GameMessage>(nullptr);
}

inline void FinishGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::GameMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::GameMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_
