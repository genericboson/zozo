// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHARACTERMOVE_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_CHARACTERMOVE_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct CharacterMoveReq;
struct CharacterMoveReqBuilder;

struct CharacterMoveAck;
struct CharacterMoveAckBuilder;

struct CharacterMoveReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CharacterMoveReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct CharacterMoveReqBuilder {
  typedef CharacterMoveReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(CharacterMoveReq::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(CharacterMoveReq::VT_Y, y, 0.0f);
  }
  explicit CharacterMoveReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CharacterMoveReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CharacterMoveReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CharacterMoveReq> CreateCharacterMoveReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  CharacterMoveReqBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct CharacterMoveAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CharacterMoveAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  GenericBoson::Zozo::ResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::ResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct CharacterMoveAckBuilder {
  typedef CharacterMoveAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::ResultCode result_code) {
    fbb_.AddElement<uint32_t>(CharacterMoveAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  explicit CharacterMoveAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CharacterMoveAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CharacterMoveAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CharacterMoveAck> CreateCharacterMoveAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success) {
  CharacterMoveAckBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

inline const GenericBoson::Zozo::CharacterMoveAck *GetCharacterMoveAck(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::CharacterMoveAck>(buf);
}

inline const GenericBoson::Zozo::CharacterMoveAck *GetSizePrefixedCharacterMoveAck(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::CharacterMoveAck>(buf);
}

inline bool VerifyCharacterMoveAckBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::CharacterMoveAck>(nullptr);
}

inline bool VerifySizePrefixedCharacterMoveAckBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::CharacterMoveAck>(nullptr);
}

inline void FinishCharacterMoveAckBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::CharacterMoveAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCharacterMoveAckBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::CharacterMoveAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_CHARACTERMOVE_GENERICBOSON_ZOZO_H_
