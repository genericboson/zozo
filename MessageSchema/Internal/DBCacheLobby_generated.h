// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DBCACHELOBBY_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_DBCACHELOBBY_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct LoginDBReq;
struct LoginDBReqBuilder;

struct LoginDBAck;
struct LoginDBAckBuilder;

struct DBCacheLobbyMessage;
struct DBCacheLobbyMessageBuilder;

enum DBCacheLobbyPayload : uint8_t {
  DBCacheLobbyPayload_NONE = 0,
  DBCacheLobbyPayload_LoginDBReq = 1,
  DBCacheLobbyPayload_LoginDBAck = 2,
  DBCacheLobbyPayload_MIN = DBCacheLobbyPayload_NONE,
  DBCacheLobbyPayload_MAX = DBCacheLobbyPayload_LoginDBAck
};

inline const DBCacheLobbyPayload (&EnumValuesDBCacheLobbyPayload())[3] {
  static const DBCacheLobbyPayload values[] = {
    DBCacheLobbyPayload_NONE,
    DBCacheLobbyPayload_LoginDBReq,
    DBCacheLobbyPayload_LoginDBAck
  };
  return values;
}

inline const char * const *EnumNamesDBCacheLobbyPayload() {
  static const char * const names[4] = {
    "NONE",
    "LoginDBReq",
    "LoginDBAck",
    nullptr
  };
  return names;
}

inline const char *EnumNameDBCacheLobbyPayload(DBCacheLobbyPayload e) {
  if (::flatbuffers::IsOutRange(e, DBCacheLobbyPayload_NONE, DBCacheLobbyPayload_LoginDBAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDBCacheLobbyPayload()[index];
}

template<typename T> struct DBCacheLobbyPayloadTraits {
  static const DBCacheLobbyPayload enum_value = DBCacheLobbyPayload_NONE;
};

template<> struct DBCacheLobbyPayloadTraits<GenericBoson::Zozo::LoginDBReq> {
  static const DBCacheLobbyPayload enum_value = DBCacheLobbyPayload_LoginDBReq;
};

template<> struct DBCacheLobbyPayloadTraits<GenericBoson::Zozo::LoginDBAck> {
  static const DBCacheLobbyPayload enum_value = DBCacheLobbyPayload_LoginDBAck;
};

bool VerifyDBCacheLobbyPayload(::flatbuffers::Verifier &verifier, const void *obj, DBCacheLobbyPayload type);
bool VerifyDBCacheLobbyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct LoginDBReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginDBReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *account() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCOUNT);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNT) &&
           verifier.VerifyString(account()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginDBReqBuilder {
  typedef LoginDBReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account(::flatbuffers::Offset<::flatbuffers::String> account) {
    fbb_.AddOffset(LoginDBReq::VT_ACCOUNT, account);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(LoginDBReq::VT_PASSWORD, password);
  }
  explicit LoginDBReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginDBReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginDBReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginDBReq> CreateLoginDBReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> account = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  LoginDBReqBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_account(account);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginDBReq> CreateLoginDBReqDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *account = nullptr,
    const char *password = nullptr) {
  auto account__ = account ? _fbb.CreateString(account) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return GenericBoson::Zozo::CreateLoginDBReq(
      _fbb,
      account__,
      password__);
}

struct LoginDBAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginDBAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  GenericBoson::Zozo::InternalResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::InternalResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct LoginDBAckBuilder {
  typedef LoginDBAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::InternalResultCode result_code) {
    fbb_.AddElement<uint32_t>(LoginDBAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  explicit LoginDBAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginDBAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginDBAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginDBAck> CreateLoginDBAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::InternalResultCode result_code = GenericBoson::Zozo::InternalResultCode_Success) {
  LoginDBAckBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

struct DBCacheLobbyMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DBCacheLobbyMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::DBCacheLobbyPayload payload_type() const {
    return static_cast<GenericBoson::Zozo::DBCacheLobbyPayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::LoginDBReq *payload_as_LoginDBReq() const {
    return payload_type() == GenericBoson::Zozo::DBCacheLobbyPayload_LoginDBReq ? static_cast<const GenericBoson::Zozo::LoginDBReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::LoginDBAck *payload_as_LoginDBAck() const {
    return payload_type() == GenericBoson::Zozo::DBCacheLobbyPayload_LoginDBAck ? static_cast<const GenericBoson::Zozo::LoginDBAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyDBCacheLobbyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::LoginDBReq *DBCacheLobbyMessage::payload_as<GenericBoson::Zozo::LoginDBReq>() const {
  return payload_as_LoginDBReq();
}

template<> inline const GenericBoson::Zozo::LoginDBAck *DBCacheLobbyMessage::payload_as<GenericBoson::Zozo::LoginDBAck>() const {
  return payload_as_LoginDBAck();
}

struct DBCacheLobbyMessageBuilder {
  typedef DBCacheLobbyMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::DBCacheLobbyPayload payload_type) {
    fbb_.AddElement<uint8_t>(DBCacheLobbyMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(DBCacheLobbyMessage::VT_PAYLOAD, payload);
  }
  explicit DBCacheLobbyMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DBCacheLobbyMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DBCacheLobbyMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DBCacheLobbyMessage> CreateDBCacheLobbyMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::DBCacheLobbyPayload payload_type = GenericBoson::Zozo::DBCacheLobbyPayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  DBCacheLobbyMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyDBCacheLobbyPayload(::flatbuffers::Verifier &verifier, const void *obj, DBCacheLobbyPayload type) {
  switch (type) {
    case DBCacheLobbyPayload_NONE: {
      return true;
    }
    case DBCacheLobbyPayload_LoginDBReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::LoginDBReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DBCacheLobbyPayload_LoginDBAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::LoginDBAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyDBCacheLobbyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDBCacheLobbyPayload(
        verifier,  values->Get(i), types->GetEnum<DBCacheLobbyPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::DBCacheLobbyMessage *GetDBCacheLobbyMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::DBCacheLobbyMessage>(buf);
}

inline const GenericBoson::Zozo::DBCacheLobbyMessage *GetSizePrefixedDBCacheLobbyMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::DBCacheLobbyMessage>(buf);
}

inline bool VerifyDBCacheLobbyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::DBCacheLobbyMessage>(nullptr);
}

inline bool VerifySizePrefixedDBCacheLobbyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::DBCacheLobbyMessage>(nullptr);
}

inline void FinishDBCacheLobbyMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::DBCacheLobbyMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDBCacheLobbyMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::DBCacheLobbyMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_DBCACHELOBBY_GENERICBOSON_ZOZO_H_
