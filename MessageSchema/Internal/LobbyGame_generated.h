// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOBBYGAME_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_LOBBYGAME_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Constant_generated.h"
#include "ServerInfo_generated.h"

namespace GenericBoson {
namespace Zozo {

struct PassTokenReq;
struct PassTokenReqBuilder;

struct PassTokenAck;
struct PassTokenAckBuilder;

struct LobbyGameMessage;
struct LobbyGameMessageBuilder;

enum LobbyGamePayload : uint8_t {
  LobbyGamePayload_NONE = 0,
  LobbyGamePayload_PassTokenReq = 1,
  LobbyGamePayload_PassTokenAck = 2,
  LobbyGamePayload_MIN = LobbyGamePayload_NONE,
  LobbyGamePayload_MAX = LobbyGamePayload_PassTokenAck
};

inline const LobbyGamePayload (&EnumValuesLobbyGamePayload())[3] {
  static const LobbyGamePayload values[] = {
    LobbyGamePayload_NONE,
    LobbyGamePayload_PassTokenReq,
    LobbyGamePayload_PassTokenAck
  };
  return values;
}

inline const char * const *EnumNamesLobbyGamePayload() {
  static const char * const names[4] = {
    "NONE",
    "PassTokenReq",
    "PassTokenAck",
    nullptr
  };
  return names;
}

inline const char *EnumNameLobbyGamePayload(LobbyGamePayload e) {
  if (::flatbuffers::IsOutRange(e, LobbyGamePayload_NONE, LobbyGamePayload_PassTokenAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLobbyGamePayload()[index];
}

template<typename T> struct LobbyGamePayloadTraits {
  static const LobbyGamePayload enum_value = LobbyGamePayload_NONE;
};

template<> struct LobbyGamePayloadTraits<GenericBoson::Zozo::PassTokenReq> {
  static const LobbyGamePayload enum_value = LobbyGamePayload_PassTokenReq;
};

template<> struct LobbyGamePayloadTraits<GenericBoson::Zozo::PassTokenAck> {
  static const LobbyGamePayload enum_value = LobbyGamePayload_PassTokenAck;
};

bool VerifyLobbyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, LobbyGamePayload type);
bool VerifyLobbyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct PassTokenReq FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PassTokenReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4
  };
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
};

struct PassTokenReqBuilder {
  typedef PassTokenReq Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(PassTokenReq::VT_TOKEN, token);
  }
  explicit PassTokenReqBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PassTokenReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PassTokenReq>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PassTokenReq> CreatePassTokenReq(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0) {
  PassTokenReqBuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PassTokenReq> CreatePassTokenReqDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return GenericBoson::Zozo::CreatePassTokenReq(
      _fbb,
      token__);
}

struct PassTokenAck FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PassTokenAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4
  };
  GenericBoson::Zozo::ResultCode result_code() const {
    return static_cast<GenericBoson::Zozo::ResultCode>(GetField<uint32_t>(VT_RESULT_CODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           verifier.EndTable();
  }
};

struct PassTokenAckBuilder {
  typedef PassTokenAck Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(GenericBoson::Zozo::ResultCode result_code) {
    fbb_.AddElement<uint32_t>(PassTokenAck::VT_RESULT_CODE, static_cast<uint32_t>(result_code), 0);
  }
  explicit PassTokenAckBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PassTokenAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PassTokenAck>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PassTokenAck> CreatePassTokenAck(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::ResultCode result_code = GenericBoson::Zozo::ResultCode_Success) {
  PassTokenAckBuilder builder_(_fbb);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

struct LobbyGameMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LobbyGameMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::LobbyGamePayload payload_type() const {
    return static_cast<GenericBoson::Zozo::LobbyGamePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::PassTokenReq *payload_as_PassTokenReq() const {
    return payload_type() == GenericBoson::Zozo::LobbyGamePayload_PassTokenReq ? static_cast<const GenericBoson::Zozo::PassTokenReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::PassTokenAck *payload_as_PassTokenAck() const {
    return payload_type() == GenericBoson::Zozo::LobbyGamePayload_PassTokenAck ? static_cast<const GenericBoson::Zozo::PassTokenAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyLobbyGamePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::PassTokenReq *LobbyGameMessage::payload_as<GenericBoson::Zozo::PassTokenReq>() const {
  return payload_as_PassTokenReq();
}

template<> inline const GenericBoson::Zozo::PassTokenAck *LobbyGameMessage::payload_as<GenericBoson::Zozo::PassTokenAck>() const {
  return payload_as_PassTokenAck();
}

struct LobbyGameMessageBuilder {
  typedef LobbyGameMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::LobbyGamePayload payload_type) {
    fbb_.AddElement<uint8_t>(LobbyGameMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(LobbyGameMessage::VT_PAYLOAD, payload);
  }
  explicit LobbyGameMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LobbyGameMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LobbyGameMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LobbyGameMessage> CreateLobbyGameMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::LobbyGamePayload payload_type = GenericBoson::Zozo::LobbyGamePayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  LobbyGameMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyLobbyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, LobbyGamePayload type) {
  switch (type) {
    case LobbyGamePayload_NONE: {
      return true;
    }
    case LobbyGamePayload_PassTokenReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::PassTokenReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case LobbyGamePayload_PassTokenAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::PassTokenAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyLobbyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLobbyGamePayload(
        verifier,  values->Get(i), types->GetEnum<LobbyGamePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::LobbyGameMessage *GetLobbyGameMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::LobbyGameMessage>(buf);
}

inline const GenericBoson::Zozo::LobbyGameMessage *GetSizePrefixedLobbyGameMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::LobbyGameMessage>(buf);
}

inline bool VerifyLobbyGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::LobbyGameMessage>(nullptr);
}

inline bool VerifySizePrefixedLobbyGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::LobbyGameMessage>(nullptr);
}

inline void FinishLobbyGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LobbyGameMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLobbyGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::LobbyGameMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_LOBBYGAME_GENERICBOSON_ZOZO_H_
