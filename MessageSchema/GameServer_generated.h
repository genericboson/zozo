// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_
#define FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "CharacterMove_generated.h"
#include "Constant_generated.h"

namespace GenericBoson {
namespace Zozo {

struct GameMessage;
struct GameMessageBuilder;

enum GamePayload : uint8_t {
  GamePayload_NONE = 0,
  GamePayload_CharacterMoveReq = 1,
  GamePayload_CharacterMoveAck = 2,
  GamePayload_MIN = GamePayload_NONE,
  GamePayload_MAX = GamePayload_CharacterMoveAck
};

inline const GamePayload (&EnumValuesGamePayload())[3] {
  static const GamePayload values[] = {
    GamePayload_NONE,
    GamePayload_CharacterMoveReq,
    GamePayload_CharacterMoveAck
  };
  return values;
}

inline const char * const *EnumNamesGamePayload() {
  static const char * const names[4] = {
    "NONE",
    "CharacterMoveReq",
    "CharacterMoveAck",
    nullptr
  };
  return names;
}

inline const char *EnumNameGamePayload(GamePayload e) {
  if (::flatbuffers::IsOutRange(e, GamePayload_NONE, GamePayload_CharacterMoveAck)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGamePayload()[index];
}

template<typename T> struct GamePayloadTraits {
  static const GamePayload enum_value = GamePayload_NONE;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterMoveReq> {
  static const GamePayload enum_value = GamePayload_CharacterMoveReq;
};

template<> struct GamePayloadTraits<GenericBoson::Zozo::CharacterMoveAck> {
  static const GamePayload enum_value = GamePayload_CharacterMoveAck;
};

bool VerifyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, GamePayload type);
bool VerifyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct GameMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  GenericBoson::Zozo::GamePayload payload_type() const {
    return static_cast<GenericBoson::Zozo::GamePayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GenericBoson::Zozo::CharacterMoveReq *payload_as_CharacterMoveReq() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterMoveReq ? static_cast<const GenericBoson::Zozo::CharacterMoveReq *>(payload()) : nullptr;
  }
  const GenericBoson::Zozo::CharacterMoveAck *payload_as_CharacterMoveAck() const {
    return payload_type() == GenericBoson::Zozo::GamePayload_CharacterMoveAck ? static_cast<const GenericBoson::Zozo::CharacterMoveAck *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyGamePayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericBoson::Zozo::CharacterMoveReq *GameMessage::payload_as<GenericBoson::Zozo::CharacterMoveReq>() const {
  return payload_as_CharacterMoveReq();
}

template<> inline const GenericBoson::Zozo::CharacterMoveAck *GameMessage::payload_as<GenericBoson::Zozo::CharacterMoveAck>() const {
  return payload_as_CharacterMoveAck();
}

struct GameMessageBuilder {
  typedef GameMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(GenericBoson::Zozo::GamePayload payload_type) {
    fbb_.AddElement<uint8_t>(GameMessage::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(GameMessage::VT_PAYLOAD, payload);
  }
  explicit GameMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameMessage> CreateGameMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GenericBoson::Zozo::GamePayload payload_type = GenericBoson::Zozo::GamePayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  GameMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyGamePayload(::flatbuffers::Verifier &verifier, const void *obj, GamePayload type) {
  switch (type) {
    case GamePayload_NONE: {
      return true;
    }
    case GamePayload_CharacterMoveReq: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveReq *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GamePayload_CharacterMoveAck: {
      auto ptr = reinterpret_cast<const GenericBoson::Zozo::CharacterMoveAck *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyGamePayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGamePayload(
        verifier,  values->Get(i), types->GetEnum<GamePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const GenericBoson::Zozo::GameMessage *GetGameMessage(const void *buf) {
  return ::flatbuffers::GetRoot<GenericBoson::Zozo::GameMessage>(buf);
}

inline const GenericBoson::Zozo::GameMessage *GetSizePrefixedGameMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenericBoson::Zozo::GameMessage>(buf);
}

inline bool VerifyGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenericBoson::Zozo::GameMessage>(nullptr);
}

inline bool VerifySizePrefixedGameMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenericBoson::Zozo::GameMessage>(nullptr);
}

inline void FinishGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::GameMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenericBoson::Zozo::GameMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Zozo
}  // namespace GenericBoson

#endif  // FLATBUFFERS_GENERATED_GAMESERVER_GENERICBOSON_ZOZO_H_
